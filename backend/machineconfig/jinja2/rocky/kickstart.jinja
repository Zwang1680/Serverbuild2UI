# LCOGT Kickstart system installation script (Generated by Django)
# vim: set ts=4 sts=4 sw=4 et ft=kickstart:

################################################################################
# Basic Setup
################################################################################

lang en_US.UTF-8
keyboard us

{% if boot_mode != 'rescue' -%}
install
{% endif -%}
firewall --disabled
firstboot --disabled
selinux --disabled
timezone --utc Etc/UTC
{% if boot_mode != 'rescue' -%}
reboot
{%- endif %}
{% if osversion >= 7 -%}
eula --agreed
{%- endif %}

################################################################################
# Root Password
################################################################################

authconfig --enableshadow --passalgo=sha512
rootpw --iscrypted {{ crypt_password_root }}

################################################################################
# SSH-accessible installation monitor
################################################################################

# Enable root user account to monitor Anaconda installer over SSH
sshpw --username=root {{ crypt_password_root }} --iscrypted
# Enable eng user account to monitor Anaconda installer over SSH
sshpw --username=eng {{ crypt_password_eng }} --iscrypted

################################################################################
# Repositories
################################################################################

{# Generate the appropriate repository command based on OS major version #}
{%- macro myrepo(name, cost) -%}
repo --name={{ name }}{% if osversion != 5 %} --cost={{ cost }}{% endif %} --baseurl={{ mirrorbase }}
{%- endmacro -%}

{% if osversion >= 8 -%}
url --url={{ mirrorbase }}/centos/{{ osversion }}/BaseOS/{{ arch }}/os/
{%- else -%}
url --url={{ mirrorbase }}/centos/{{ osversion }}/os/{{ arch }}
{%- endif %}

# Local Repositories for faster installs (lowest cost wins)
{% if osversion >= 8 -%}
{{ myrepo('CentOS',     '500') }}/centos/{{ osversion }}/BaseOS/{{ arch }}/os/
{{ myrepo('AppStream',  '400') }}/centos/{{ osversion }}/AppStream/{{ arch }}/os/
{{ myrepo('extras',     '400') }}/centos/{{ osversion }}/extras/{{ arch }}/os/
{{ myrepo('epel',       '300') }}/epel/{{ osversion }}/Everything/{{ arch }}/
{%- else -%}
{{ myrepo('CentOS',     '500') }}/centos/{{ osversion }}/os/{{ arch }}/
{{ myrepo('updates',    '400') }}/centos/{{ osversion }}/updates/{{ arch }}/
{{ myrepo('extras',     '400') }}/centos/{{ osversion }}/extras/{{ arch }}/
{{ myrepo('epel',       '300') }}/epel/{{ osversion }}/{{ arch }}/
{%- endif %}
{{ myrepo('lcogt',      '200') }}/lcogt/{{ osversion }}/
{{ myrepo('puppet5',    '100') }}/puppet5/{{ osversion }}/{{ arch }}/

################################################################################
# Network Configuration
################################################################################

{{ network_configuration }}

{% if boot_mode == 'rescue' -%}
################################################################################
# Rescue Mode Activated !!!
################################################################################
{% else -%}
################################################################################
# Hard Disk Partitioning
################################################################################

{# Run the appropriate commands to wipe the disks based on OS major version #}
{%- macro mywipedisk() -%}
bootloader --location=mbr --append="crashkernel=auth rhgb"
{% if osversion <= 5 -%}
zerombr yes
{% else -%}
zerombr
{% endif -%}
clearpart --all --initlabel
{%- endmacro -%}

{% if partition == 'auto' -%}
# CentOS Automatic Partitioning
{{ mywipedisk() }}
autopart
{%- elif partition == 'docknode' -%}
# Docker node standard partitioning
{{ mywipedisk() }}
part / --fstype={{ fstype_bootable }} --grow --size=1
{%- elif partition == 'lcogt' -%}
# LCOGT automatic partitioning
{{ mywipedisk() }}
part /boot --fstype={{ fstype_bootable }} --size=1024
part / --fstype={{ fstype_root }} --size=81920
part /var --fstype={{ fstype_other }} --size=81920
part /data --fstype={{ fstype_other }} --grow --size=1
part swap --fstype=swap --size=8192
{%- elif partition == 'pubsubdb' -%}
# PubsubDB Partition Scheme
{{ mywipedisk() }}
part / --fstype={{ fstype_bootable }} --size=20480
part /var/lib/mysql --fstype={{ fstype_other }} --grow --size=1
{%- elif partition == 'simple' -%}
# Simple Partition Scheme
{{ mywipedisk() }}
part / --fstype={{ fstype_bootable }} --grow --size=1
{%- elif partition == 'simple-8swap' -%}
# Simple Partition Scheme
# 8GB swap
{{ mywipedisk() }}
part / --fstype={{ fstype_bootable }} --grow --size=1
part swap --fstype=swap --size=8192
{%- elif partition == 'simple-8swap-20var' -%}
# Simple Partition Scheme
# 8GB swap
# 20GB /var
{{ mywipedisk() }}
part / --fstype={{ fstype_bootable }} --grow --size=1
part /var --fstype={{ fstype_other }} --size=20480
part swap --fstype=swap --size=8192
{%- elif partition == 'prompt' -%}
# Automatic partitioning disabled, you will be prompted
{%- elif partition == 'custom' -%}
# User-specified custom partition scheme
{{ partition_custom }}
{%- endif %}

################################################################################
# Installed Packages
################################################################################

# Packages to install/remove
# 'yum search' and 'yum grouplist' will help you out
# Prefix with '@' for a package group
# Prefix with '-' to not install a package
# List package names to install
#
# KEEP IT MINIMAL AND USE PUPPET TO DEPLOY EVERYTHING!
#
%packages
@Base
@Core

# Remove chrony: LCO uses ntpd
-chrony

curl
epel-release
htop
nfs-utils
puppet-agent
puppet5-release
rsync
screen

{% if arch == 'x86_64' -%}
# Packages only available on 64-bit (x86_64 architecture)
xfsprogs
{%- endif %}

{% if osversion >= 5 and osversion <= 7 -%}
# Packages available on CentOS 5-7
ntp
python-virtualenv
{%- endif %}

{% if osversion >= 6 and osversion <= 7 -%}
# Packages available on CentOS 6-7
ntpdate
{%- endif %}

{% if osversion >= 6 and osversion <= 8 -%}
# Packages available on CentOS 6-8
vim
{%- endif %}

{# CentOS 5 '%packages' does not tolerate '%end' -#}
{% if osversion != 5 -%}
%end
{%- endif %}

################################################################################
# Pre Install Script
################################################################################

{% if osversion >= 7 -%}
%pre
#!/bin/bash -x
{% if partition not in ('prompt', 'custom') -%}
# Automatic partitioning selected
# Wiping existing partitions and RAID signatures
for device in /dev/hd? /dev/sd? /dev/vd? ; do
    [[ -b "$device" ]] || continue
    echo "Wiping block device: $device"
    wipefs -a -f "$device"
    udevadm settle --timeout=5
    echo "Issue DISCARD (TRIM) on block device: $device"
    blkdiscard -v "$device"
done
{%- else -%}
# Non-automatic partitioning selected
# Not wiping existing partitions and RAID signatures
{%- endif %}

# Replace mkfs.xfs with a wrapper so that XFS filesystems are created
# with Docker OverlayFS compatibility
mv /sbin/mkfs.xfs /sbin/mkfs.xfs.original
cat > /sbin/mkfs.xfs << EOF
#!/bin/bash
exec /sbin/mkfs.xfs.original -n ftype=1 "\$@"
EOF
chmod +x /sbin/mkfs.xfs
%end
{%- endif %}

################################################################################
# Post Install Script
################################################################################

%post
#!/bin/bash -x

# Global Variables
export PUPPETMASTER="core.lco.gtn"
{% if hostname != '' -%}
export HOSTNAME="{{ hostname }}"
hostname "{{ hostname }}"
{%- endif %}

# Neat trick to automatically redirect all input/output
# to the 1st console screen, and then switch to it.
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1
chvt 1

# Ensure the terminal is in good shape if anything screwed it up
reset

# Update local time
echo "Updating system time"
/usr/sbin/ntpdate -ub tym.lco.gtn
/usr/sbin/hwclock --systohc

# Automatically revoke the certificate for this host
# http://www.joebajin.com/blog/2013/08/20/simple-way-to-remove-puppet-cert-during-build/
export PUPPET_CERT_STATUS_URL="https://${PUPPETMASTER}:8140/production/certificate_status/$HOSTNAME"
curl -v --tlsv1 -k -X PUT -H "Content-Type: text/pson" --data '{"desired_state":"revoked"}' "$PUPPET_CERT_STATUS_URL"
curl -v --tlsv1 -k -X DELETE -H "Accept: pson" "$PUPPET_CERT_STATUS_URL"

{%- macro service_disable(name) -%}
{% if osversion >= 7 -%}
systemctl disable {{ name }}
{%- else -%}
/sbin/chkconfig --level 2345 {{ name }} off
{%- endif %}
{%- endmacro %}

# Disable unnecessary / unwanted system services
{% if osversion == 5 -%}
{{ service_disable('auditd') }}
{{ service_disable('bluetooth') }}
{{ service_disable('firstboot') }}
{{ service_disable('gpm') }}
{{ service_disable('ip6tables') }}
{{ service_disable('iptables') }}
{{ service_disable('iscsi') }}
{{ service_disable('iscsid') }}
{{ service_disable('kudzu') }}
{{ service_disable('mcstrans') }}
{{ service_disable('pcscd') }}
{{ service_disable('rawdevices') }}
{{ service_disable('readahead_early') }}
{{ service_disable('readahead_later') }}
{{ service_disable('smartd') }}
{{ service_disable('yum-updatesd') }}
{%- elif osversion == 6 -%}
{{ service_disable('abrt-ccpp') }}
{{ service_disable('abrtd') }}
{{ service_disable('auditd') }}
{{ service_disable('ip6tables') }}
{{ service_disable('iptables') }}
{{ service_disable('sysstat') }}
{%- elif osversion == 7 -%}
{{ service_disable('abrt-ccpp.service') }}
{{ service_disable('abrt-oops.service') }}
{{ service_disable('abrt-vmcore.service') }}
{{ service_disable('abrt-xorg.service') }}
{{ service_disable('abrtd.service') }}
{{ service_disable('auditd.service') }}
{{ service_disable('smartd.service') }}
{%- else -%}
{{ service_disable('auditd.service') }}
{{ service_disable('smartd.service') }}
{% endif %}

{% if site == 'wer' -%}
# WER site does not use Puppet (non-LCO builds) at the current time
{% else -%}
# Use custom facts for Puppet to indicate that we are
# in the process of the initial server build
export FACTER_lcogtserverbuild="yes"

echo "Running puppet: server=$PUPPETMASTER hostname=$HOSTNAME"
/opt/puppetlabs/bin/puppet agent --server "$PUPPETMASTER" --certname "$HOSTNAME" --test --waitforcert=0
{%- endif %}

{% if osversion >= 7 -%}
# force the initial-setup package off: it breaks bootup when
# Puppet has installed a graphical desktop environment
{{ service_disable('initial-setup-graphical.service') }}
{{ service_disable('initial-setup-text.service') }}
{% endif %}

# notify serverbuild that this rebuild is complete, and that
# it should switch the machine back to boot from its local disk
curl -v --tlsv1 -k -X POST --data 'action=local' {{ bootmodeurl }}

# sync disks (for good measure)
sync

# The system is finished building now, and we are ready to reboot.
# CentOS has occasional bugs that cause it not to reboot, so we try
# several different methods here to help it along.
reboot

# and if that didn't work, force it using the magic sysrq sequence
sleep 30
# sync
echo s > /proc/sysrq-trigger
# unmount filesystems
echo u > /proc/sysrq-trigger
# force reboot
echo b > /proc/sysrq-trigger

# there is no way to get here, but we do it anyway
exit 0
%end
{% endif -%}
